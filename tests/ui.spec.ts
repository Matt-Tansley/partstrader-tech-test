import { test, expect } from "@playwright/test";
import { HomePage } from "../pages/home-page";
import {
  randCity,
  randCompanyName,
  randCounty,
  randCreditCardCVV,
  randCreditCardNumber,
  randEmail,
  randFirstName,
  randLastName,
  randNumber,
  randPhoneNumber,
  randSentence,
  randState,
  randStreetAddress,
  randUserName,
  randWord,
  randZipCode,
} from "@ngneat/falso";

test("Test Case 14: Place Order: Register while Checkout", async ({ page }) => {
  // Set seed for test data generated by falso.
  // Could be a hook that runs before tests.
  // Seed could be made configurable.
  // Also should set a different seed per test and browser instance to avoid conflicting usernames.
  // seed("myseed");

  const homePage = new HomePage(page);
  await homePage.goto();
  await expect(
    page.getByRole("heading", { name: "AutomationExercise" }),
  ).toBeVisible();

  const productsPage = await homePage.navbar.clickProducts();
  await productsPage.addFirstProductToCart();
  await productsPage.continueShopping();

  const cartPage = await productsPage.navbar.clickCart();
  await expect(page.getByText("Home Shopping Cart")).toBeVisible();
  // Assumption that user is logged out
  await cartPage.clickProceedToCheckout();
  await expect(cartPage.registerLoginLink).toBeVisible();

  const loginPage = await cartPage.clickRegisterLoginLink();
  const username = randUserName(); // saving this to check later
  await loginPage.fillSignupNameInput(username);
  await loginPage.fillSignupEmailinput(randEmail());

  const signupPage = await loginPage.clickSignupLink();
  const streetAddress = randStreetAddress();
  // Might be better to pass the list of arguments as an object for readability.
  await signupPage.fillForm(
    randWord(),
    randFirstName(),
    randLastName(),
    randCompanyName(),
    streetAddress,
    randCounty(),
    randState(),
    randCity(),
    randZipCode(),
    randPhoneNumber(),
  );

  const accountCreatedPage = await signupPage.clickCreateAccount();
  await expect(page.getByText("Account Created!")).toBeVisible();
  // Should clickContinueLink() return a home page instance?
  await accountCreatedPage.clickContinueLink();

  // Assumption that we are back on home page.
  await expect(page.getByText(`Logged in as ${username}`)).toBeVisible();
  // Should cart page instance be overridden?
  await homePage.navbar.clickCart();

  // Assumption that we are back on cart page, and user is logged in.
  const checkoutPage = await cartPage.clickProceedToCheckout();
  await expect(
    page.getByRole("heading", { name: "Address Details" }),
  ).toBeVisible();
  // Just checking street name, but could improve to check the full address.
  await expect(checkoutPage.deliveryAddress).toContainText(streetAddress);
  await expect(checkoutPage.billingAddress).toContainText(streetAddress);
  await expect(
    page.getByRole("heading", { name: "Review Your Order" }),
  ).toBeVisible();
  await checkoutPage.fillMessageInput(randSentence());

  const paymentPage = await checkoutPage.clickPlaceOrderLink();
  await paymentPage.fillForm(
    randFirstName(),
    randCreditCardNumber(),
    randCreditCardCVV(),
    randNumber({ min: 1, max: 12 }).toString(),
    randNumber({ min: 2025, max: 2030 }).toString(),
  );
  await paymentPage.clickPayAndConfirmButton();

  await expect(page.getByText("Order Placed!")).toBeVisible();
  await page.getByRole("link", { name: "Delete Account" }).click();
  await expect(page.getByText("Account Deleted!")).toBeVisible();
  await page.getByRole("link", { name: "Continue" }).click();
});
